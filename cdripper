#!/usr/bin/env python
#    cdripper - Python script to rip CDs
#    Copyright (C) 2010  Jon Mason <jdmason@kudzu.us>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
import getopt, os, sys, threading, time, CDDB, DiscID, string

#TODO:
# Python bindings for flac
# Python bindings for lame
# Python bindings for cdparanoia
# Fetch CD Cover art
# change errors to exceptions
# Add ability to push changes to CDDB

class album:
	def __init__(self):
		self.artist = None
		self.artist_dir = None
		self.album = None
		self.album_dir = None
		self.track_offset = [] #FIXME - make a track struct
		self.track_title = []
		self.track_name = []
		self.year = None
		self.genre = None
		self.cddb_checksum = 0
		self.disc_length = 0
		self.device = "/dev/cdrom"
		self.dest_dir = os.environ['HOME']
		self.cleanup = True
		self.force_rewrite = False
		self.force_va = False
		self.va_swap = False
		self.title_only = False
		self.mp3 = False
		self.flac = True
		self.update = False
		self.new = False

	def _flac_thread(self, num):
		print "Encoding Track %d - \"%s\" as flac" %(num+1, self.track_title[num])

		if self.artist.startswith("Various"):
			artist = self.track_title[num].split(' / ')[0]
			artist_dir = self.track_name[num].split('_-_')[0]
			track_title = self.track_title[num].split(' / ')[1]
		else:
			artist = self.artist
			artist_dir = self.artist_dir
			track_title = self.track_title[num]

		name = "%s/%s/%s" %(artist_dir, self.album_dir, self.track_name[num])

		error = os.system('flac --best "%s.wav" --tag=TITLE="%s" --tag=ARTIST="%s" --tag=ALBUM="%s" --tag=ALBUMARTIST="%s" --tag=DATE="%s" --tag=TRACKNUMBER="%s" --tag=GENRE="%s"'
				  %(name, track_title, artist, self.album, self.artist, self.year, num+1, self.genre))
		if error:
			print "Error %d encountered while encoding" %error
			return

		if self.cleanup:
			os.system('rm "%s.wav"' %name)
		print "Done Encoding Track %d - \"%s\"" %(num+1, self.track_title[num])


	#This function adds a dep for lame
	def _lame_thread(self, num):
		print "Encoding Track %d - \"%s\" as mp3" %(num+1, self.track_title[num])

		if self.artist.startswith("Various"):
			artist = self.track_name[num].split('_-_')[0]
			artist_dir = artist
			artist.replace('_', ' ')
			track_title = self.track_title[num].split(' / ')[1]
		else:
			artist = self.artist
			artist_dir = self.artist_dir
			track_title = self.track_title[num]

		lame_opts = "-S --preset extreme -q 0 -V 0"

		name = "%s/%s/%s" %(artist_dir, self.album_dir, self.track_name[num])

		error = os.system('lame %s "%s.wav" "%s.mp3" --add-id3v2 --tt "%s" --ta "%s" --tl "%s" --ty "%s" --tn "%s" --tg "%s"'
				  %(lame_opts, name, name, track_title, artist, self.album, self.year, num+1, self.genre))
		if error:
			print "Error %d encountered while encoding" %error
			return

		if self.cleanup:
			os.system('rm "%s.wav"' %name)
		print "Done Encoding Track %d - \"%s\"" %(num+1, self.track_title[num])


	#This function adds a dep for cdparanoia
	def _rip(self, num):
		print "Ripping Track %d to WAV" %(num+1)

		if self.artist.startswith("Various"):
			artist_dir = self.track_name[num].split('_-_')[0]
		else:
			artist_dir = self.artist_dir

		error = os.system('cdparanoia -wd %s %d "%s/%s/%s.wav"' %(self.device, num+1, artist_dir, self.album_dir, self.track_name[num]))
		if error:
			return True

		return False


	def rip_encode(self):
		print "Ripping CD & Encoding\n"

		for i in range(len(self.track_name)):
			#cdparanoia can't rip data tracks and will return an error.  Skip it.
			if self.track_title[i].lower() == "data":
				continue

			error = self._rip(i)
			if error:
				return True

			if self.flac:
				lt = threading.Thread(target=self._flac_thread, args=(i,))
				lt.start()

			if self.mp3:
				lt = threading.Thread(target=self._lame_thread, args=(i,))
				lt.start()

		return False


	def create_dest_dir(self):
		print "Creating Directory\n"

		error = os.chdir(self.dest_dir)
		if error:
			return True

		if self.artist.startswith("Various"):
			for i in range(len(self.track_name)):
				artist_dir = self.track_name[i].split('_-_')[0]
				dirs = "%s/%s" %(artist_dir, self.album_dir)

				error = os.access(dirs, os.F_OK)
				if error == True:
					continue

				error = os.makedirs(dirs)
				if error:
					return True
		else:
			dirs = "%s/%s" %(self.artist_dir, self.album_dir)

			error = os.access(dirs, os.F_OK)
			if error == False:
				error = os.makedirs(dirs)
				if error:
					return True

		return False


	def create_playlist(self):
		if not self.mp3:
			return False

		print "Creating m3u Playlist\n"

		error = os.chdir(self.dest_dir)
		if error:
			return True

		m3u = open('%s_-_%s.m3u' %(self.artist_dir, self.album_dir), "w")

		for i in range(len(self.track_name)):
			if self.artist.startswith("Various"):
				artist = self.track_name[i].split('_-_')[0]
				s = "%s/%s/%s.mp3\n" %(artist, self.album_dir, self.track_name[i])
			else:
				s = "%s/%s/%s.mp3\n" %(self.artist_dir, self.album_dir, self.track_name[i])
			m3u.writelines(s)

		m3u.close()

		return False


	def _artist_name_fixup(self, artist):
		#for output uniformity, we should make sure that all titles that end with ", The" have "The " added to the beginning
		if artist.endswith(', The'):
			artist = artist.rstrip(', The')
			artist = "%s%s" %('The ', artist)

		if artist.endswith(', the'):
			artist = artist.rstrip(', the')
			artist = "%s%s" %('The ', artist)

		if artist.startswith('the '):
			artist = artist.replace('the ', 'The ', 1)

		artist = artist.translate(None, ':()`"')
		artist = artist.replace('&', 'and')
		artist = artist.replace('w/', ' With ')
		artist = artist.replace(' With ', ' featuring ')
		artist = artist.replace(' Feat ', ' featuring ')
		artist = artist.replace(' Feat. ', ' featuring ')
		artist = artist.replace(' Ft. ', ' featuring ')
		artist = string.capwords(artist)
		#FIXME - split on feat and exclude
		print "Artist %s" %artist

		#Look for a similarly named artist already existing and change to that if so
		lower = artist.lower()
#strip away all punchuation and look!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		lower = lower.strip(string.punctuation)
		lower = lower.translate(None, '`. ')
		lower = lower.split(' with ')[0]
		lower = lower.split(' featuring ')[0]
		lower = lower.replace(' ', '_')
		lower_w_the = "%s%s" %('the', lower)
		lower_wo_the = lower.lstrip('the')
		for files in os.listdir(self.dest_dir):
			temp = files.lower()
			temp = temp.translate(None, '_.')
			temp = temp.strip(string.punctuation)
			if lower == temp or lower_w_the == temp or lower_wo_the == temp:
				files = files.replace('_', ' ')
				print "Similar Artist %s found" %files
				artist = files

		return artist

	def _album_name_fixup(self, album):
		album = string.capwords(album)
		#album = album.strip(string.punctuation)
		album = album.translate(None, ':\'`"')
		return album


	def _track_title_fixup(self, tracktitle):
		tracktitle = tracktitle.strip()
		tracktitle = tracktitle.translate(None, '`"')
		return tracktitle


	def _track_name_fixup(self, trackname):
		trackname = trackname.strip()
		trackname = trackname.replace(' ', '_')
		trackname = trackname.translate(None, '?:`\/"')
		#FIXME - truncate the name at 189 chars
		trackname = trackname[:189]
		return trackname


	def _fillout_va_disc_info(self, disc_info, num_tracks):
		self.artist = "Various"

		if self.album == None:
			if len(disc_info['DTITLE'].split(' / ')) > 1:
				self.album = disc_info['DTITLE'].split(' / ')[1]
			else:
				print "Album name is hosed...working around it"
				self.album = disc_info['DTITLE']

			self.album = self._album_name_fixup(self.album)

		self.artist_dir = self.artist
		self.album_dir = self.album.replace(' ', '_')

		self.year = disc_info['DYEAR']
		self.genre = disc_info['DGENRE']

		print "Artist\t- %s" %self.artist
		print "Album\t- %s" %self.album
		print "Year\t- %s" %self.year
		print "Genre\t- %s" %self.genre

		for i in range(num_tracks):
			#determine if the seperator is '/' or '-'
			if len(disc_info['TTITLE0'].split(' / ')) > 1:
				self.track_title.append(disc_info['TTITLE' + `i`])

				#Do nothing...FIXME, rewrite to make unnecessary
			elif len(disc_info['TTITLE0'].split(' - ')) > 1:
				self.track_title.append(disc_info['TTITLE' + `i`])
				self.track_title[i] = self.track_title[i].replace(' - ', ' / ')
			elif len(disc_info['TTITLE0'].split(' _ ')) > 1:
				self.track_title.append(disc_info['TTITLE' + `i`])
				self.track_title[i] = self.track_title[i].replace(' _ ', ' / ')
			elif len(disc_info['TTITLE0'].split(': ')) > 1:
				self.track_title.append(disc_info['TTITLE' + `i`])
				self.track_title[i] = self.track_title[i].replace(': ', ' / ')
			elif len(disc_info['TTITLE0'].split('/ ')) > 1:
				self.track_title.append(disc_info['TTITLE' + `i`])
				self.track_title[i] = self.track_title[i].replace('/', ' / ')
			else:
				print "Invalid Various Artist Disc - %s" %disc_info['TTITLE0'].split(' / ')
				return True

			self.track_title[i] = self._track_title_fixup(self.track_title[i])

			if len(self.track_title[i].split(' / ')) > 1:
				if self.va_swap:
					artist = self.track_title[i].split(' / ')[1]
					song = self.track_title[i].split(' / ')[0]
					self.track_title[i] = "%s / %s" %(artist, song)
				else:
					artist = self.track_title[i].split(' / ')[0]
					song = self.track_title[i].split(' / ')[1]
			else:
				print "WARNING - Artist name and Song Title may be wrong"
				artist = self.track_title[i]
				song = self.track_title[i]
				print "\t%.02d - %s" %(i+1, self.track_title[i])

			artist = self._artist_name_fixup(artist)
			artist = artist.replace(' ', '_')
			song = self._track_name_fixup(song)
			track_name = "%s_-_%.02d_%s" %(artist, i+1, song)
			self.track_name.append(track_name)
			print "\t%.02d - %s" %(i+1, self.track_title[i])
		print "\n"
		return False


	def _fillout_disc_info(self, disc_info, num_tracks):
		if len(disc_info['DTITLE'].split('/')) < 2:
			print "Album name of \"%s\" is unacceptable" %disc_info['DTITLE']
			return True

		if self.artist == None:
			self.artist = disc_info['DTITLE'].split('/')[0]
			self.artist = self.artist.strip()

		if self.album == None:
			self.album = disc_info['DTITLE'].split('/')[1]
			self.album = self.album.strip()

		if self.artist == self.album and len(self.artist.split(' - ')) > 1:
			print "The CDDB entry is hosed, attempting to work-around"
			self.artist = self.artist.split(' - ')[0]
			self.album = self.album.split(' - ')[1]

		self.artist = self._artist_name_fixup(self.artist)
		self.album = self._album_name_fixup(self.album)

		self.artist_dir = self.artist.translate(None, '/')
		self.artist_dir = self.artist_dir.replace(' ', '_')
		self.album_dir = self.album.translate(None, '/')
		self.album_dir = self.album_dir.replace(' ', '_')

		if self.year == None:
			self.year = disc_info['DYEAR']

		if self.genre == None:
			self.genre = disc_info['DGENRE']

		print "Artist\t- %s" %self.artist
		print "Album\t- %s" %self.album
		print "Year\t- %s" %self.year
		print "Genre\t- %s" %self.genre

		for i in range(num_tracks):
			self.track_title.append(disc_info['TTITLE' + `i`])
			self.track_title[i] = self._track_title_fixup(self.track_title[i])
			track_name = "%s_-_%.02d_%s" %(self.artist, i+1, self.track_title[i])
			track_name = self._track_name_fixup(track_name)
			self.track_name.append(track_name)
			print "\t%.02d - %s" %(i+1, self.track_title[i])
		print "\n"
		return False


	def _create_cddb_email(self):
		print "Would you like to send this via e-mail to update the CDDB?"
		choice = raw_input('--> ')
		if choice == "y" or choice == "Yes" or choice == "yes":
			print "Sending email..."
		else:
			return False

		sendmail_location = "/usr/sbin/sendmail" # sendmail location
		email = os.popen("%s -t" % sendmail_location, "w")
		email.write("To: %s\n" % "submit@gnudb.org")
		email.write("Subject: cddb %s %08lx\n" %(self.genre, self.cddb_checksum))
		email.write("\n") # blank line separating headers from body

		email.write("# xmcd\n")
		email.write("#\n")
		email.write("# Track frame offsets:\n")
		for i in range(len(self.track_name)):
			email.write("#\t%s\n" %self.track_offset[i])
		email.write("#\n")
		email.write("# Disc length: %s seconds\n" %self.disc_length)
		email.write("#\n")
		if self.update:
			email.write("# Revision: 1\n")
		else:
			email.write("# Revision: 0\n")
		email.write("# Submitted via: cdripper v%s\n" %"0.1")
		email.write("#\n")
		email.write("DISCID=%08lx\n" %self.cddb_checksum)
		email.write("DTITLE=%s / %s\n" %(self.artist, self.album))
		email.write("DYEAR=%s\n" %self.year)
		email.write("DGENRE=%s\n" %self.genre.lower())
		for i in range(len(self.track_name)):
			email.write("TTITLE%d=%s\n" %(i, self.track_title[i]))
		email.write("EXTD=\n")
		for i in range(len(self.track_name)):
			email.write("EXTT%s=\n" %i)
		email.write("PLAYORDER=\n")
		status = email.close()

		return False


	def _fillout_CDDB_info(self, num_tracks):
		print "Please enter Artist name (\"Various\" for Multiple Artists)"
		self.artist = raw_input('--> ')
		print "Please enter Album name"
		self.album = raw_input('--> ')
		print "Please enter the Year the album was produced (Enter for Unknown)"
		self.year = raw_input('--> ')
		print "Please enter the Genre of the album (data folk jazz misc rock country blues newage reggae classical soundtrack)"
		self.genre = raw_input('--> ')

		print "Artist\t- %s" %self.artist
		print "Album\t- %s" %self.album
		print "Year\t- %s" %self.year
		print "Genre\t- %s" %self.genre

		print "Is this correct?"
		choice = raw_input('--> ')
		if choice == "y" or choice == "Yes" or choice == "yes":
			print "Excellent, let's move on"
		else:
			print "Try again"
			return True

		if self.artist == "Various":
			self.artist_dir = self.artist
			self.album_dir = self.album.replace(' ', '_')
		else:
			self.artist_dir = self.artist.translate(None, '/')
			self.artist_dir = self.artist_dir.replace(' ', '_')
			self.album_dir = self.album.translate(None, '/')
			self.album_dir = self.album_dir.replace(' ', '_')

		print "Enter Track titles:"
		for i in range(num_tracks):
			track = raw_input('Track %d --> ' %(i+1))
			self.track_title.append(track)
			self.track_title[i] = self._track_title_fixup(self.track_title[i])

			if self.artist == "Various":
				artist = self.track_title[i].split(' / ')[0]
				song = self.track_title[i].split(' / ')[1]
				track_name = "%s_-_%.02d_%s" %(artist, i+1, song)
			else:
				track_name = "%s_-_%.02d_%s" %(self.artist, i+1, self.track_title[i])

			track_name = self._track_name_fixup(track_name)
			self.track_name.append(track_name)

		for i in range(num_tracks):
			print "Track %d is %s" %(i, self.track_title[i])

		print "Is this correct?"
		choice = raw_input('--> ')
		if choice == "y" or choice == "Yes" or choice == "yes":
			print "Excellent, let's move on"
			self._create_cddb_email()
		else:
			print "Try again"
			return True

		return False


	#This function adds a dep for CDDB-py
	def fetch_cddb(self):
		print "Fetching CDDB Information\n"

		while True:
			try:
				dev = DiscID.open(self.device)
				disc_id = DiscID.disc_id(dev)
				break
			except:
				time.sleep(1)
				print "No disc detected, retrying..."

                (error, query_info) = CDDB.query(disc_id, 'https://gnudb.gnudb.org/~cddb/cddb.cgi')
		if error != 200 and error != 210 and error != 211 and error != 202:
			print "Error encountered querying CDDB, error = %d" %error
			return True

		if error == 202 or self.new or self.force_rewrite:
			if error == 202 and self.title_only:
				print "No CDDB entry found" 
				return True

			if error == 202:
				print "No CDDB entry found, would you like to enter one?"
			else:
				print "Would you like to enter a new CDDB entry?"

			choice = raw_input('--> ')
			if choice == "y" or choice == "Yes" or choice == "yes":
				self.new = True
				self.cddb_checksum = disc_id[0]
				for i in range(disc_id[1]):
					self.track_offset.append("%s" %disc_id[i + 2])
				self.disc_length = disc_id[i + 3]
				if self._fillout_CDDB_info(disc_id[1]):
					return True
				else:
					return False
			else:
				return True

		if error == 210 or error == 211:
			if self.artist == None:
				artist_preset = False
			else:
				artist_preset = True

			if self.album == None:
				album_preset = False
			else:
				album_preset = True

			if len(query_info) > 1:
				print "Multiple Disc's found"
				for i in range(len(query_info)):
					temp_info = query_info[i]
					print "%d - Title = %s, Category %s, disc_id %s" %(i, temp_info['title'], temp_info['category'], temp_info['disc_id'])
					(error, disc_info) = CDDB.read(temp_info['category'], temp_info['disc_id'])
					if error != 210:
						print "Error reading from CDDB, Exiting"
						return True
					self._fillout_disc_info(disc_info, disc_id[1])
					# reset arrays otherwise, it will keep adding to the same lists and will mess up the call to _fillout_disc_info below
					self.track_title = []
					self.track_name = []

					if artist_preset == False:
						self.artist = None
					if album_preset == False:
						self.album = None

				#print "Please select the correct disc number"
				#choice = raw_input()
				choice = int(raw_input('Please select the correct disc number: '))
				while choice < 0 or choice > i:
					print "Selection %d invalid, please choose again" %choice
					choice = raw_input()

				print "Selection %d Chosen" %choice
			else:
				choice = 0
			query_info = query_info[choice]

		if not self.new:
			(error, disc_info) = CDDB.read(query_info['category'], query_info['disc_id'])
			if error != 210:
				print "Error encountered reading CDDB, error = %d" %error
				return True

		if self.force_va or disc_info['DTITLE'].split(' / ')[0].startswith("Various"):
			error = self._fillout_va_disc_info(disc_info, disc_id[1])
		else:
			error = self._fillout_disc_info(disc_info, disc_id[1])

		if error or self.title_only:
			return True
		else:
			return False

def print_help():
	print "The following paramaters are permissable:"
	print "\t--device <DEV>\t\tChange the cdrom device from /dev/cdrom to the device specified"
	print "\t--dest_dir <PATH>\tChange the destination directory of the files from ~/ to the path specified"
	print "\t--nocleanup\t\tDo not remove WAV files after encoding"
	print "\t--force_rewrite\t\tForce the rewriting of the Disc Information"
	print "\t--update\t\tUpdate CDDB with revised Disc Information"
	print "\t--new\t\tNew CDDB entry"
	print "\t--force_va\t\tForce the disc to be treated as a Various Artists album"
	print "\t--va_swap\t\tSwap Artist/Track title arrangement on Various Artists album"
	print "\t--title_only\t\tPrintout Album infomation and exit"
	print "\t--mp3\t\t\tEncode in mp3"
	print "\t--flac\t\t\tEncode in FLAC"
	print "\t--replace_artist <NAME>\tOverwrite the Artist from CDDB"
	print "\t--replace_album <NAME>\tOverwrite the Album from CDDB"
	print "\t--replace_genre <NAME>\tOverwrite the Genre from CDDB"
	print "\t--replace_year <NAME>\tOverwrite the Year from CDDB"
	print "\t--help\t\t\tPrintout available parameters"

def main():
	#verify that lame and cdparanoia are installed/in path
	disc = album()

	try:
		opts, args = getopt.getopt(sys.argv[1:], "", ["device=", "dest_dir=", "nocleanup", "force_rewrite", "update", "new", "force_va", "va_swap", "title_only", "replace_artist=", "replace_album=", "replace_genre=", "replace_year=", "help"])
	except getopt.error, err:
		print str(err)
		print_help()
		sys.exit(2)

	for o, a in opts:
		if o == "--device":
			disc.device = a
		if o == "--dest_dir":
			disc.dest_dir = a
		if o == "--nocleanup":
			disc.cleanup = False	
		if o == "--force_rewrite":
			disc.force_rewrite = True
		if o == "--update":
			disc.update = True
		if o == "--new":
			disc.new = True
		if o == "--force_va":
			disc.force_va = True
		if o == "--va_swap":
			disc.va_swap = True
		if o == "--title_only":
			disc.title_only = True
		if o == "--flac":
			disc.flac = True
			disc.mp3 = False
		if o == "--mp3":
			disc.mp3 = True
			disc.flac = False
		if o == "--replace_artist":
			disc.artist = a
		if o == "--replace_album":
			disc.album = a
		if o == "--replace_genre":
			disc.genre = a
		if o == "--replace_year":
			disc.year = a
		if o == "--help":
			print_help()
			return

	error = os.system('which cdparanoia > /dev/null')
	if error:
		print "cdparanoia not installed, exiting..."
		return

	error = os.system('which flac > /dev/null')
	if error and disc.flac:
		print "flac not installed, exiting..."
		return

	error = os.system('which lame > /dev/null')
	if error and disc.mp3:
		print "lame not installed, exiting..."
		return

	rc = disc.fetch_cddb()
	if rc:
		return

	rc = disc.create_playlist()
	if rc:
		return

	rc = disc.create_dest_dir()
	if rc:
		return

	rc = disc.rip_encode()
	if rc:
		return

	os.system('eject "%s"' %disc.device)
	print "Finished Ripping CD, Enjoy!"


if __name__ == "__main__":
	main()
